#swagger based on https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-2-the-basics/
#this is the Open API version which we use
swagger: "2.0"
#Info about our api, this version es the api's version (not the specification version or the file version)
info:
  version: 1.0.0
  title: Api CRUD for user's videos
  description: A simple Api which only can be access by token
  contact:
    name: Fernando Llallire
    email: fernandorllallire@gmail.com
#info of the URL which people will use to call the web api
schemes:
  #- https
  - http
host: localhost:3030
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: Bearer authentication (Bearer <jwt token>) this token is generated by the server and is storage in a cookie named logInUser
paths:
  /user/createUser:
    put:
      description: create a new user
      parameters:
        - name: new user parameters
          in: body
          required: true
          description: all the data needed for the new user creation
          schema:
            required:
              - name
              - userName
              - password
              - confirmPassword
            properties:
              name:
                type: string
                example: fernando
              userName:
                type: string
                example: fernandorllallire@gmail.com
              password:
                type: string
                example: "1234"
              confirmPassword:
                type: string
                example: "1234"
      responses:
        200:
          description: created user
          schema:
            $ref: "#/definitions/JwtAndMessage"
        400:
          description: Validation data error
          schema:
            $ref: "#/definitions/JoiValidation"
        500:
          description: error creating user
          schema:
            $ref: "#/definitions/Error"
  /user/logIn:
    post:
      description: LogIn the user
      parameters:
        - name: logIn parameters
          in: body
          required: true
          description: all the data needed for the logIn
          schema:
            required:
              - userName
              - password
            properties:
              userName:
                type: string
                example: fernandorllallire@gmail.com
              password:
                type: string
                example: "1234"
      responses:
        200:
          description: user logged
          schema:
            $ref: "#/definitions/JwtAndMessage"
        400:
          description: Validation data error
          schema:
            $ref: "#/definitions/JoiValidation"
        401:
          description: password incorrect
          schema:
            $ref: "#/definitions/Error"
        404:
          description: user doesn't exist
          schema:
            $ref: "#/definitions/Error"            
        500:
          description: error in the logIn proccess
          schema:
            $ref: "#/definitions/Error"    
  /user/delete:
    delete:
      description: delete the user
      parameters:
        - name: delete parameters
          in: body
          required: true
          description: all the data needed for delete the user
          schema:
            required:
              - _id
            properties:
              _id:
                type: string
                example: insertIdCreaterd!
      responses:
       200:
        description: user deleted (jwt is empty)
        schema:
          $ref: "#/definitions/JwtAndMessage"
       400:
        description: Validation data error
        schema:
          $ref: "#/definitions/JoiValidation"
       404:
        description: user doesn't exist
        schema:
          $ref: "#/definitions/Error"    
       500:
          description: error in the delete proccess
          schema:
            $ref: "#/definitions/Error" 
  /user/update:
    patch:
      description: update the user data
      parameters:
        - name: update parameters
          in: body
          required: true
          description: all the data needed for update the user
          schema:
            required:
              - _id
              - name
              - userName
            properties:
              _id:
                type: string
                example: insertIdCreaterd!
              name:
                type: string
                example: ruben
              userName: 
                type: string
                example: rubenllallire@gmail.com
      responses:
       200:
        description: user updated
        schema:
          $ref: "#/definitions/JwtAndMessage"
       400:
        description: Validation data error
        schema:
          $ref: "#/definitions/JoiValidation"
       404:
        description: user doesn't exist
        schema:
          $ref: "#/definitions/Error"    
       500:
          description: error in the update proccess
          schema:
            $ref: "#/definitions/Error" 
  /user/userData:
    get:
      security:
        - Bearer: []
      description: api that return all the data of the user in the token
      responses:
        200:
          description: return the id, name and userName
          schema:
            type: object
            required:
              - message
              - data
            properties:
              message:
                type: string
                description: status of the action
              data:
                type: object
                required:
                  - _id
                  - name
                  - userName
                properties:
                  _id:
                    type: string
                  name: 
                    type: string
                  userName:
                    type: string
  /video/list:
    get:
      security:
        - Bearer: []
      description: list all the videos of the user logged
      responses:
        200:
          description: Show an array with all the videos of the user
          schema:
            $ref: "#/definitions/VideoResponse" 
        500:
          description: error listing all the videos
          schema:
            $ref: "#/definitions/Error"
  /video/add:
   put:
    security:
      - Bearer: []
    description: add url and description of a new video to user
    parameters:
      - name: New video parameters
        in: body
        required: true
        description: url and description of the new video
        schema:
          required:
            - url
            - description
          properties:
            url:
              type: string
              example: http://thenewcode.com/assets/videos/blue.mp4
            description:
              type: string
              example: blue
    responses:
      200:
        description: Message of the status and an array with all the new videos
        schema:
          $ref: "#/definitions/TypeResponseVideo" 
      400:
        description: Validation data error
        schema:
          $ref: "#/definitions/JoiValidation" 
      409:
        description: Url already exist in the user list
        schema:
          $ref: "#/definitions/Error"
      500:
        description: error adding video
        schema:
          $ref: "#/definitions/Error"

  /video/update:
      patch:
        security:
          - Bearer: []
        description: add url and description of a new video to user
        parameters:
          - name: video parameters to update
            required: true
            in: body
            description: url and description of the video and the new parameters
            schema:
              required:
                - url
                - description
                - newUrl
                - newDescription
              properties:
                url:
                  type: string
                  example: http://thenewcode.com/assets/videos/editable.mp4
                description:
                  type: string
                  example: editable
                newUrl:
                  type: string
                  example: http://thenewcode.com/assets/videos/glacier.mp4
                newDescription:
                  type: string
                  example: glacier
        responses:
          200:
            description:  Message of the status and an array with all the new videos
            schema:
             $ref: "#/definitions/TypeResponseVideo"
          400:
            description: Validation data error
            schema:
              $ref: "#/definitions/JoiValidation"             
          404:
            description: The url already exist in the user's video list
            schema:
              $ref: "#/definitions/Error"
          409:
            description: The url doesn't exist in the user's video list 
            schema:
              $ref: "#/definitions/Error"
          500:
            description: An unepected error ocured
            schema:
              $ref: "#/definitions/Error"
                  
  /video/delete:
    delete:
      security:
        - Bearer: []
      description: add url and description of the video to delete
      parameters:
        - name: Delete Video Parameters
          required: true
          in: body
          description: id of the elemento to delete
          schema:
            required:
              - _id
            properties:
              _id:
                type: string
                example: 5c4a0e26c747a400231208b3
      responses:
        200:
          description:  video deleted
          schema:
            $ref: "#/definitions/TypeResponseVideo"
        400:
          description: Validation data error
          schema:
            $ref: "#/definitions/JoiValidation"
        404:
          description: The url doesn't exist in the user's video list
          schema:
            $ref: "#/definitions/Error"
        500:
          description: error deleting the video
          schema:
            $ref: "#/definitions/Error" 
            
definitions:
  JwtAndMessage:
    type: object
    required:
      - message
      - jwt
    properties:
      message:
        type: string
      jwt:
        type: string
  Error:
    type: object
    required:
      - message
    properties:
      message:
        type: string
  TypeResponseVideo:
    type: object
    required:
      - message
      - data
    properties:
      message:
        type: string
        description: status of the action
      data:
        $ref: "#/definitions/VideoResponse"
  VideoResponse:
    type: array
    items:
      type: object
      required:
        - _id
        - url
        - description
      properties:
        _id:
          type: string
          description: Id of the subdocument in mongoose
        url:
          type: string
        description:
          type: string
  JoiValidation:
    type: array
    items:
      type: object
      required:
        - message
        - path
        - type
        - context
      properties:
        message:
          type: string
        path:
          type: string
        type:
          type: string
        context:
          type: object
          required:
            - key
            - label
          properties:
            key:
              type: string
            label:
              type: string